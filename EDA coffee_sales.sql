use coffee_sales_data;

select* from coffee_sales;

create table coffee_sales2
like coffee_sales;

insert coffee_sales2
select* from coffee_sales;

select* from coffee_sales2;

with duplicate_cte as
(
select*, 
row_number() over(partition by `date`, `datetime`, cash_type, card, money, coffee_name) as row_num
from coffee_sales2
)
  select* from duplicate_cte
  where row_num >1;
  
  select distinct trim(coffee_name)
  from coffee_sales2;
  
  update coffee_sales2
  set coffee_name = trim(coffee_name);
  
  -- Average revenue generated by coffee sales
  select coffee_name, avg(money) as avg_money
  from coffee_sales2
  group by coffee_name
  order by avg_money desc;
  
  -- summary of coffee sales statistics 
  select count(*) as total_sales,
  min(`date`) as starting_date,
  max(`date`) as ending_date,
  count(distinct coffee_name) as coffee_names
  from coffee_sales2;
  
  -- Daily sales
select `date`, count(*) as total_sales
from coffee_sales2
group by `date`
order by `date`;

-- 7-day moving average of daily sales
select `date`, count(*) as daily_sales,
avg(count(*)) over (order by `date` rows between 6 preceding and current row ) as moving_avg_7_days
from coffee_sales2
group by `date`
order by `date`;

-- Aggregate sales by day of the week
select dayofweek(`date`) as day_of_week, count(*) as total_sales
from coffee_sales2
group by day_of_week
order by day_of_week;

-- Aggregate sales by month
select date_format(`date`, '%Y-%m') as months, count(*) as total_sales
from coffee_sales2
group by months
order by months;

--  Creating features like Day of the week, Hour of the day
select *,
       dayofweek(`date`) as day_of_week,
       hour(`datetime`) as hour_of_day
from coffee_sales2;

-- Aggregate sales by hour of the day
select hour(`datetime`) as hour_of_day, count(*) as total_sales
from coffee_sales
group by hour_of_day
order by hour_of_day;

-- Total revenue generated on different types of coffee
select coffee_name, sum(money) as total_revenue
from coffee_sales2
group by coffee_name
order by total_revenue desc;

select `date`, sum(money) as revenue_generated
from coffee_sales2
group by `date`
order by revenue_generated desc;

-- Rolling_Total per month
select substring(`date`, 1, 7) as sales_month, sum(money) as revenue_generated
from coffee_sales2
group by substring(`date`, 1, 7)
order by revenue_generated ;

with rolling_total as
(
  select substring(`date`, 1, 7) as sales_month, sum(money) as revenue_generated
  from coffee_sales2
  group by substring(`date`, 1, 7)
  order by revenue_generated
)
 select sales_month, revenue_generated,
 sum(revenue_generated) over(order by sales_month) as rolling_total
 from rolling_total;

-- Types of payment summary
select count(*) as total_sales,
      sum(case when cash_type = 'card' then 1 else 0 end) as Card_count,
      sum(case when cash_type = 'cash' then 1 else 0 end) as Cash_count
from coffee_sales2;

-- Revenue generated per month based on coffee type 
select coffee_name, substring(`date`, 1, 7) as months, sum(money) as revenue_generated
from coffee_sales2
group by coffee_name, months
order by 3 desc;

with Sales_Month as
(
 select coffee_name, substring(`date`, 1, 7) as months, sum(money) as revenue_generated
 from coffee_sales2
 group by coffee_name, months
 ), 
 d_rank as
 (
 select* , 
 dense_rank() over(partition by months order by revenue_generated desc) as d_rank
 from Sales_Month
 )
  select* from d_rank
  where d_rank <=5;


select* from coffee_sales2;
  

 
 


































